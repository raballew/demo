---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: demo
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: results
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: socketcan-smoketest
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source
          - name: results
            workspace: results
        taskSpec:
          results:
                - name: recording-end-timestamp
          workspaces:
            - name: source
            - name: results
          steps:
            - image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              resources:
                limits:
                  socketcan.raballew.de/vcan: 1
              name: canplayer
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                # play a recorded CAN trace on each available vcan interface
                ip -j link show type vcan up | jq -r '.[] | .ifname' | xargs -P 0 -n 1 canplayer -I trace.log
            - name: pause
              image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              args: ["sleep", "5"]
          sidecars:
            - image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              name: candump
              workingDir: $(workspaces.results.path)
              script: |
                #!/usr/bin/env bash
                # listen on all available vcan interfaces that are up
                date +%s | tee $(results.recording-end-timestamp.path)
                ip -j link show type vcan up | jq -r '.[] | .ifname' | xargs candump -L -n 100 > $(results.recording-end-timestamp.path).log
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - name: results
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"
