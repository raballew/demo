---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: demo
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/task: "git-clone"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: results
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: test
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source
          - name: results
            workspace: results
        taskSpec:
          params:
            - name: revision
              default: $(params.revision)
          workspaces:
            - name: source
            - name: results
          steps:
            - image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              resources:
                limits:
                  socketcan.raballew.de/vcan: 1000
              name: canplayer
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                # ensure recording has been started
                while true
                do
                  if [ -f "$(workspaces.results.path)/$(params.revision).log" ]; then
                    break
                  fi
                  sleep 1
                done

                # play CAN trace on all vcan interfaces
                ip -j link show type vcan up | jq -r '.[] | .ifname' | xargs -P 0 -I {} canplayer -v -I trace.log {}=vcan
          sidecars:
            - image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              name: candump
              workingDir: $(workspaces.results.path)
              script: |
                #!/usr/bin/env bash
                # listen on all available interfaces
                ip link show type vcan up
                candump -t z any -L | tee $(params.revision).log
      - name: analysis
        runAfter:
          - test
        workspaces:
          - name: source
            workspace: source
          - name: results
            workspace: results
        taskSpec:
          params:
            - name: revision
              default: $(params.revision)
          workspaces:
            - name: source
            - name: results
          steps:
            - image: quay.io/pwallrab/edge-device-plugin/socketcan-client:latest
              name: analyzer
              workingDir: $(workspaces.results.path)
              script: |
                #!/usr/bin/env bash
                cat $(params.revision).log
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - name: results
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"
